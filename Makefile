# Makefile pour simplifier les commandes Docker et Prisma

.PHONY: help db-up db-down db-reset db-logs db-shell prisma-studio prisma-migrate prisma-push setup

help: ## Afficher l'aide
	@echo "Commandes disponibles:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

setup: ## Configuration initiale compl√®te
	@echo "üì¶ Installation des d√©pendances..."
	npm install
	@echo "üê≥ D√©marrage de PostgreSQL..."
	docker-compose up -d
	@echo "‚è≥ Attente du d√©marrage de la base de donn√©es..."
	sleep 5
	@echo "üîß G√©n√©ration du client Prisma..."
	npx prisma generate
	@echo "üìä Application du sch√©ma Prisma..."
	npx prisma db push
	@echo "‚úÖ Configuration termin√©e! Cr√©ez votre fichier .env.local avec:"
	@echo "DATABASE_URL=\"postgresql://abe_user:abe_password@localhost:5432/abe_vitrine?schema=public\""

db-up: ## D√©marrer PostgreSQL
	docker-compose up -d
	@echo "‚úÖ PostgreSQL d√©marr√© sur localhost:5432"
	@echo "‚úÖ Adminer disponible sur http://localhost:8080"

db-down: ## Arr√™ter PostgreSQL
	docker-compose down
	@echo "‚úÖ PostgreSQL arr√™t√©"

db-reset: ## R√©initialiser compl√®tement la base de donn√©es
	docker-compose down -v
	docker-compose up -d
	sleep 3
	npx prisma db push
	@echo "‚úÖ Base de donn√©es r√©initialis√©e"

db-logs: ## Voir les logs de PostgreSQL
	docker-compose logs -f postgres

db-shell: ## Acc√©der au shell PostgreSQL
	docker-compose exec postgres psql -U abe_user -d abe_vitrine

prisma-studio: ## Ouvrir Prisma Studio
	npx prisma studio

prisma-migrate: ## Cr√©er une nouvelle migration
	npx prisma migrate dev

prisma-push: ## Pousser le sch√©ma sans migration
	npx prisma db push

prisma-generate: ## G√©n√©rer le client Prisma
	npx prisma generate

dev: db-up ## D√©marrer le serveur de d√©veloppement avec la DB
	npm run dev

clean: ## Nettoyer les fichiers temporaires
	rm -rf .next
	rm -rf node_modules/.cache
	@echo "‚úÖ Nettoyage effectu√©"



